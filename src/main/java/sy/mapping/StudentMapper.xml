<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="sy.dao.StudentMapper" >
	<resultMap id="BaseResultMap" type="sy.service.student.StudentData" >
		<id column="id" property="id" jdbcType="VARCHAR" />
    	<result column="login_name" property="login_name" jdbcType="VARCHAR" />
    	<result column="password" property="password" jdbcType="VARCHAR" />
	    <result column="name" property="name" jdbcType="VARCHAR" />
	    <result column="sex" property="sex" jdbcType="VARCHAR" />
	    <result column="effective_date" property="effective_date" jdbcType="VARCHAR" />
	    <result column="failure_date" property="failure_date" jdbcType="VARCHAR" />
	    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
	    <result column="tel" property="tel" jdbcType="VARCHAR" />
	    <result column="email" property="email" jdbcType="VARCHAR" />
	    <result column="role" property="role" jdbcType="VARCHAR" />
	    <result column="address" property="address" jdbcType="VARCHAR" />
	    <result column="online_type" property="online_type" jdbcType="VARCHAR" />
	    <result column="create_date" property="create_date" jdbcType="VARCHAR" />
	    <result column="active" property="active" jdbcType="CHAR" />
	</resultMap>
	<sql id="Base_Column_List" >
    	id, login_name, password, name,sex,effective_date,failure_date,nickname,tel,email,role,address,online_type, active,create_date
  	</sql>
	<select id="getStudentListPage" resultMap="BaseResultMap" parameterType="sy.service.student.StudentData">
		select 
    	<include refid="Base_Column_List" />
    	from t_user 
    	<trim prefix="WHERE" prefixOverrides="AND | OR ">
    		<if test="id != null and id != ''">
    			and id = #{id,jdbcType=VARCHAR}
    		</if>
    		<if test="login_name != null and login_name != ''">
    			and login_name like CONCAT(CONCAT('%',#{login_name,jdbcType=VARCHAR}),'%')
    		</if>
    		<if test="name != null and name != ''">
    			and name like CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
    		</if>
    		<if test="active !=null and active != ''">
    			and active =  #{active,jdbcType=VARCHAR}
    		</if>
    		<if test="effective_date !=null and effective_date != ''">
    			and effective_date =  #{effective_date,jdbcType=VARCHAR}
    		</if>
    		<if test="failure_date !=null and failure_date != ''">
    			and failure_date =  #{failure_date,jdbcType=VARCHAR}
    		</if>
    		<if test="create_date !=null and create_date != ''">
    			and create_date =  #{create_date,jdbcType=VARCHAR}
    		</if>
    		and role =  '0'
    	</trim>
	</select>
	
	<!-- 删除用户 -->
	<delete id="delStudentByIds" parameterType="java.util.Arrays">
		delete from t_user where id in 
		<foreach item="str" index="index" collection="array" open="(" separator="," close=")">
			#{str}
		</foreach>
	</delete>

	<select id="saveSelect" parameterType="sy.service.student.StudentData" resultType="INTEGER">
		select count(*) from t_user where login_name=#{login_name,jdbcType=VARCHAR} and id!=#{id,jdbcType=VARCHAR}
	</select> 
	
	<insert id="save" parameterType="sy.service.student.StudentData">
		insert into t_user (id,login_name,password,name,sex,role,create_date,active) 
		values 
		(
			#{id,jdbcType=VARCHAR}, 
			#{login_name,jdbcType=VARCHAR}, 
			#{password,jdbcType=VARCHAR}, 
      		#{name,jdbcType=VARCHAR}, 
      		#{sex,jdbcType=VARCHAR}, 
      		#{role,jdbcType=VARCHAR}, 
      		#{create_date,jdbcType=VARCHAR}, 
      		#{active,jdbcType=CHAR}
		)
	</insert>
	
	<update id="updateActive" parameterType="sy.service.student.StudentData" >
		update t_user set active=#{active,jdbcType=CHAR} where id=#{id,jdbcType=VARCHAR}
	</update>
	
	<select id="getStudentById" parameterType="sy.service.student.StudentData" resultMap="BaseResultMap">
		select 
		id,login_name,name,sex,active,role,effective_date,failure_date,nickname,tel,email,address
		from t_user
		where id=#{id,jdbcType=VARCHAR}
	</select>
	
	<update id="update" parameterType="sy.service.student.StudentData">
		update t_user set name=#{name,jdbcType=VARCHAR},
		login_name=#{login_name,jdbcType=VARCHAR},
		role=#{role,jdbcType=VARCHAR},
		sex=#{sex,jdbcType=VARCHAR},
		effective_date=#{effective_date,jdbcType=VARCHAR},
		failure_date=#{failure_date,jdbcType=VARCHAR},
		nickname=#{nickname,jdbcType=VARCHAR},
		tel=#{tel,jdbcType=VARCHAR},
		email=#{email,jdbcType=VARCHAR},
		address=#{address,jdbcType=VARCHAR}
		where id=#{id,jdbcType=VARCHAR}
	</update>
	
	
	<update id="updatePwd" parameterType="sy.service.student.StudentData">
		update t_user set password=#{password,jdbcType=VARCHAR}
		where id=#{id,jdbcType=VARCHAR}
	</update>
	<resultMap id="LessonBaseResultMap" type="sy.service.lesson.LessonData" >
		<id column="id" property="id" jdbcType="VARCHAR" />
    	<result column="name" property="name" jdbcType="VARCHAR" />
    	<result column="teacher_id" property="teacher_id" jdbcType="VARCHAR" />
	    <result column="room_id" property="room_id" jdbcType="VARCHAR" />
	    <result column="class_hour" property="class_hour" jdbcType="VARCHAR" />
	    <result column="oline_type" property="oline_type" jdbcType="VARCHAR" />
	</resultMap>
	<select id="getLessonList" parameterType="sy.service.student.StudentData"  resultMap="LessonBaseResultMap">
		select id,name from t_lesson where id not in (select 
		b.id
		from t_user_lesson a
		inner join
		t_lesson b
		on
		a.lesson_id=b.id
		where a.user_id=#{id,jdbcType=VARCHAR}) and name like CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
	</select>
	<select id="getLessonById" parameterType="sy.service.student.StudentData" resultMap="LessonBaseResultMap">
		select 
		b.id,b.name
		from t_user_lesson a
		inner join
		t_lesson b
		on
		a.lesson_id=b.id
		where a.user_id=#{id,jdbcType=VARCHAR}
	</select>
	
		<resultMap id="UserLessonBaseResultMap" type="sy.model.UserLesson" >
		<id column="id" property="id" jdbcType="INTEGER" />
    	<result column="user_id" property="user_id" jdbcType="VARCHAR" />
    	<result column="lesson_id" property="lesson_id" jdbcType="VARCHAR" />
	    <result column="remainder_class_hour" property="remainder_class_hour" jdbcType="INTEGER" />
	</resultMap>
	
		<select id="selectClassHour" parameterType="String" resultType="String">
		select 
		class_hour
		from t_lesson
		where id=#{lessonId,jdbcType=VARCHAR}
	</select>
	
		<insert id="saveLesson" parameterType="sy.model.UserLesson">
		insert into t_user_lesson (id,user_id,lesson_id,remainder_class_hour) 
		values 
		(
			#{id,jdbcType=INTEGER}, 
			#{user_id,jdbcType=VARCHAR}, 
			#{lesson_id,jdbcType=VARCHAR}, 
      		#{remainder_class_hour,jdbcType=INTEGER}
		)
	</insert>
	
	<delete id="delUserLesson" parameterType="sy.model.UserLesson">
		delete from t_user_lesson where user_id=#{user_id,jdbcType=VARCHAR}
	</delete>
	
		<delete id="delUserLessonByUserIdAndLessonId" parameterType="sy.model.UserLesson">
		delete from t_user_lesson where user_id=#{user_id,jdbcType=VARCHAR} and lesson_id=#{lesson_id,jdbcType=VARCHAR}
	</delete>
	
	<select id="getOrderNumber" resultType="String">
		select if(isnull(max(id)),1,max(id)+1) as
		id from t_user_lesson 
	</select>
	
		<select id="getClassHour" parameterType="String" resultType="INTEGER">
		select count(*) from t_user_lesson where user_id=#{str} and remainder_class_hour>0
	</select> 
</mapper>